<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro">
  <!--
    Convenience wrapper for the 'ur_robot' macro which provides default values
    for the various "parameters files" parameters for a UR5.

    This file can be used when composing a more complex scene with one or more
    UR5 robots.

    While the generic 'ur_robot' macro could also be used, it would require
    the user to provide values for all parameters, as that macro does not set
    any model-specific defaults (not even for the generic parameters, such as
    the visual and physical parameters and joint limits).

    Refer to the main 'ur_macro.xacro' in this package for information about
    use, contributors and limitations.

    NOTE: users will most likely want to override *at least* the
          'kinematics_parameters_file' parameter. Otherwise, a default kinematic
          model will be used, which will almost certainly not correspond to any
          real robot.
  -->
  <xacro:macro name="ur5_robot" params="
   prefix
   joint_limits_parameters_file:='$(find ur_description)/config/ur5/joint_limits.yaml'
   kinematics_parameters_file:='$(find ur_description)/config/ur5/default_kinematics.yaml'
   physical_parameters_file:='$(find ur_description)/config/ur5/physical_parameters.yaml'
   visual_parameters_file:='$(find ur_description)/config/ur5/visual_parameters.yaml'
   transmission_hw_interface:=hardware_interface/PositionJointInterface
   safety_limits:=false
   safety_pos_margin:=0.15
   safety_k_position:=20"
  >
    <xacro:include filename="$(find utec)/urdf/inc/ur_macro_mod.xacro"/>
    <xacro:ur_robot
      prefix="${prefix}"
      joint_limits_parameters_file="${joint_limits_parameters_file}"
      kinematics_parameters_file="${kinematics_parameters_file}"
      physical_parameters_file="${physical_parameters_file}"
      visual_parameters_file="${visual_parameters_file}"
      transmission_hw_interface="${transmission_hw_interface}"
      safety_limits="${safety_limits}"
      safety_pos_margin="${safety_pos_margin}"
      safety_k_position="${safety_k_position}"
    />
  </xacro:macro>
  
  <link name="world"/>
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

	<xacro:property name="box_width" value="0.1" /> 
	<xacro:property name="box_mass" value="20" />
	
	<link name="box">
      <visual>
        <origin xyz="0 0 ${box_width/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${box_width} ${box_width} ${box_width}"/>
        </geometry>
        <material name="orange">
          <color rgba="0.7 0.7 0.7 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 ${box_width/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${box_width} ${box_width} ${box_width}"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 ${box_width/2}" rpy="0 0 0"/>
        <mass value="${box_mass}"/>
        <inertia
            ixx="${box_mass / 12.0 * (box_width*box_width + box_width*box_width)}" ixy="0.0" ixz="0.0"
            iyy="${box_mass / 12.0 * (box_width*box_width + box_width*box_width)}" iyz="0.0"
            izz="${box_mass / 12.0 * (box_width*box_width + box_width*box_width)}"/>
      </inertial>
    </link>
	
	<joint name="box_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="tool0"/>
      <child link="box"/>
    </joint>
    
    <gazebo reference="box">
        <mu1>10.0</mu1>
        <mu2>10.0</mu2>
        <material>Gazebo/Orange</material>
    </gazebo>

</robot>
